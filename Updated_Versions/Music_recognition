{"cells":[{"cell_type":"markdown","metadata":{"id":"SD8j5mizcEkQ"},"source":["#Thoughts"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Wh6NXp72NgMS"},"outputs":[],"source":["'''\n","  1. Data preprocessing\n","    1.1 将mp3格式转化为可训练的vector\n","      可以先看一下IO 的Tutor 是否和我想象中的一样\n","    1.2 如何批量loading mp3音乐,都有哪些数据预处理技巧?\n","      先download zip, 然后unzip\n","  2. Sampling(要么一次性做成batch,要么一个一个sample地来)\n","      必须先设计网络结构，再create samples\n","      batch 训练方式?\n","      2 channels 怎么办? 直接扔进去? 看做是一个?\n","      或者拆成两个线路去训练\n","\n","      20秒钟在标准化的模型里....那就是16000*20一组\n","      范围性的输入怎么处理?\n","\n","  3. Building network\n","      GRU就够了, lstm有点点麻烦\n","      实际上我要的是结合每个slice hidden content的最后output和Pytu无差别\n","      至于模型结构，因为数据量比较庞大，应该要稍稍复杂一些\n","      >RNNlayer的话，一个就够，现在应该把重点放在batch training上\n","      >输入数据在某范围长度内,如果长度不够就用0 补齐?\n","      >Tensor input 是20s，但是允许输入是15-20,若超过则在外部处理\n","      >输入不够的末端全部用0替代---先全部截取20s,然后在末端增添随机数量的0?\n","      包装好的RNN是否每次只读取一个token?\n","\n","\n","  4. Training\n","      Using GPU to train\n","  5. Plotting\n","  6. evaluation\n","  7. trial\n","    个人trial的时候也要normalize输入\n","'''"]},{"cell_type":"markdown","metadata":{"id":"luXPKLPeRB7h"},"source":["#1.Loading the data"]},{"cell_type":"markdown","metadata":{"id":"gcoB3GJ6RLgf"},"source":["##1.1 Mounting Google drive"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20725,"status":"ok","timestamp":1727519760824,"user":{"displayName":"Xie Richie","userId":"09551390803631790404"},"user_tz":-480},"id":"1n0Hkc2qQpwM","outputId":"c067fad4-4b97-4bc1-89d3-8b36ce77f79f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","/content/drive/MyDrive/Project_learning/Music_classifier\n","\u001b[0m\u001b[01;34mdatabase\u001b[0m/  database.zip  model_weights.pth  Music_recognition.ipynb\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","%cd \"/content/drive/MyDrive/Project_learning/Music_classifier\"\n","%ls"]},{"cell_type":"markdown","metadata":{"id":"dFGAAy71RXvY"},"source":["##1.2 Transforming all MP3 to Tensor"]},{"cell_type":"code","source":["import librosa\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import glob\n","\n","#1. Define required list\n","audios=[]\n","file_names=[]\n","\n","#2. Get all the file names: ex. 'database/03007.mp3'\n","file_names=glob.glob('database/*.mp3')\n","file_names=sorted(file_names) #确保每次读写的map3顺序都一致\n","print(len(file_names))\n","print(file_names)"],"metadata":{"id":"KPzYMBhEM-mS"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":173776,"status":"ok","timestamp":1727504310415,"user":{"displayName":"Xie Richie","userId":"09551390803631790404"},"user_tz":-480},"id":"cuBu93IfQorF","outputId":"1f488052-08f7-4ac0-a4ba-da4939c71fc6"},"outputs":[{"output_type":"stream","name":"stdout","text":["78\n","['database/03001.mp3', 'database/03002.mp3', 'database/03003.mp3', 'database/03004.mp3', 'database/03005.mp3', 'database/03006.mp3', 'database/03007.mp3', 'database/03008.mp3', 'database/03009.mp3', 'database/03010.mp3', 'database/03011.mp3', 'database/04001.mp3', 'database/04002.mp3', 'database/04003.mp3', 'database/04004.mp3', 'database/04005.mp3', 'database/04006.mp3', 'database/04007.mp3', 'database/04008.mp3', 'database/04009.mp3', 'database/04010.mp3', 'database/04011.mp3', 'database/05001.mp3', 'database/05002.mp3', 'database/05003.mp3', 'database/05004.mp3', 'database/05005.mp3', 'database/05006.mp3', 'database/05007.mp3', 'database/05008.mp3', 'database/05009.mp3', 'database/05010.mp3', 'database/05011.mp3', 'database/05012.mp3', 'database/05013.mp3', 'database/05014.mp3', 'database/05015.mp3', 'database/05016.mp3', 'database/05017.mp3', 'database/05018.mp3', 'database/05019.mp3', 'database/05020.mp3', 'database/05021.mp3', 'database/05022.mp3', 'database/05023.mp3', 'database/06101.mp3', 'database/06102.mp3', 'database/06103.mp3', 'database/06104.mp3', 'database/06105.mp3', 'database/06106.mp3', 'database/06107.mp3', 'database/06108.mp3', 'database/06109.mp3', 'database/06110.mp3', 'database/06111.mp3', 'database/06113.mp3', 'database/06114.mp3', 'database/06115.mp3', 'database/06117.mp3', 'database/06118.mp3', 'database/06119.mp3', 'database/06120.mp3', 'database/06202.mp3', 'database/06203.mp3', 'database/06205.mp3', 'database/06206.mp3', 'database/06207.mp3', 'database/06208.mp3', 'database/06209.mp3', 'database/06210.mp3', 'database/06211.mp3', 'database/06212.mp3', 'database/06213.mp3', 'database/06215.mp3', 'database/06216.mp3', 'database/06217.mp3', 'database/06218.mp3']\n","Loaded 5/78 \n","Loaded 10/78 \n","Loaded 15/78 \n","Loaded 20/78 \n","Loaded 25/78 \n","Loaded 30/78 \n","Loaded 35/78 \n","Loaded 40/78 \n","Loaded 45/78 \n","Loaded 50/78 \n","Loaded 55/78 \n","Loaded 60/78 \n","Loaded 65/78 \n","Loaded 70/78 \n","Loaded 75/78 \n","Loaded 78/78 \n"]}],"source":["#3. create_spectrogram,which return a normalized graph\n","def create_spectrogram(audio):\n","    # Convert audio to spectrogram\n","    spectrogram = librosa.feature.melspectrogram(y=audio, sr=22050, n_mels=128)\n","    spectrogram_db = librosa.power_to_db(spectrogram, ref=np.max)\n","    return spectrogram_db\n","\n","#4. Adding all the graphs into the list\n","for i in range(len(file_names)):\n","  audio,_ = librosa.load(file_names[i],sr=None,mono=False)\n","  spectrogram_first = create_spectrogram(audio[0])  # First channel\n","  spectrogram_second = create_spectrogram(audio[1])  # Second channel\n","  combined_spectrogram = np.stack((spectrogram_first, spectrogram_second), axis=0)  # Shape (2, height, width)\n","  audios.append(combined_spectrogram)\n","  if (i+1)%5==0 or i+1==78:\n","    print(\"Loaded %d/78 \"%(i+1))\n","\n","\n"]},{"cell_type":"code","source":["audio,sr = librosa.load(file_names[0],sr=None,mono=False)\n","print(audio.shape)\n","mfccs = librosa.feature.mfcc(y=audio, sr=22050, n_mfcc=50)\n","print(mfccs.shape)\n","# import torchaudio\n","# audio,sample_rate = torchaudio.load(file_names[0])\n","# print(audio.size())\n","# print(audios[0].size())\n","\n","spectrogram = librosa.feature.melspectrogram(y=audio, sr=22050, n_mels=128)\n","spectrogram_db = librosa.power_to_db(spectrogram, ref=np.max)\n","print(spectrogram_db.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3PLZC1ilNQSc","executionInfo":{"status":"ok","timestamp":1727519983108,"user_tz":-480,"elapsed":4131,"user":{"displayName":"Xie Richie","userId":"09551390803631790404"}},"outputId":"30729d38-6304-4a3b-c603-33cf16b0d41c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(2, 9967188)\n","(2, 50, 19468)\n","(2, 128, 19468)\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"Xpy3BuTjToYE"},"outputs":[],"source":["# Transforming the music graphs to Tensors\n","import torch\n","for i in range(len(audios)):\n","  audios[i]=torch.tensor(audios[i],dtype=torch.float32)\n","  # print(audio.size())\n","\n","\n","# 注意因为每个audio原本长度不一样，所以第三个维度的时间轴长自然也是不一样\n","# 因此无法统一划分为Tensor(报错),但可以把每个music graph 单独定义为一个Tensor,之后采样后用stack合并"]},{"cell_type":"markdown","metadata":{"id":"Q0rJilyRp_n1"},"source":["##1.3 Prepare GPU"]},{"cell_type":"markdown","metadata":{"id":"TBjNbOHZcJET"},"source":["#2.Preparing training data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YX5IHZRYDx2p"},"outputs":[],"source":["# from re import I\n","# low=[]\n","# for i in range(len(audios)):\n","#   if audios[i].size(2)<1600:\n","#     low.append((audios[i].size(2),i))\n","# for l in low:\n","#   print(l,file_names[l[1]])\n","\n","# '''\n","# 问题音频\n","# (1281, 56) database/06112.mp3\n","# (1448, 60) database/06116.mp3\n","# (557, 65) database/06121.mp3\n","# (1576, 66) database/06201.mp3\n","# (781, 69) database/06204.mp3\n","# (914, 79) database/06214.mp3\n","# (557, 84) database/06219.mp3\n","# '''"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Mmzcip28ccX8"},"outputs":[],"source":["import random\n","#1. Define all the targets\n","data_size=8000\n","frame_size=1600\n","\n","sample_data=[]\n","sample_labels=[]\n","\n","#2.Get a random subgraph from a given graph:(20s)\n","  #大概是 0.0116秒raw音频一帧\n","  #1720帧每20秒,取1750\n","  #1289帧每15秒 取1200\n","  #model是否能接受不同input_size呢?\n","  #model可以但是做不到batch training了，因此我们取一个 1600帧---允许输入略短一些\n","  #会filter到1600帧\n","def getSample():\n","  # print(graph.size())\n","  label=random.randint(0,77)\n","  graph=audios[label]\n","  start_i=random.randint(0,graph.size(2)-1600)\n","  sample=torch.zeros([2,128,1600],dtype=torch.float32)\n","  sample.copy_(graph[:,:,start_i:(start_i+1600)])\n","  return sample,label\n","\n","def getBatchSample(batch_size):\n","  batch_data=[]\n","  batch_labels=[]\n","  for i in range(batch_size):\n","    data,label=getSample()\n","    batch_data.append(data)\n","    batch_labels.append(label)\n","  batch_data=torch.stack(batch_data)\n","  batch_labels=torch.tensor(batch_labels)\n","  return batch_data,batch_labels\n","\n","# a,b=getBatchSample(10)\n","# print(a)\n","# print(b)\n","# 还有本来就低于20秒的音乐?\n","#3.Get all data_samples and labels\n","# for i in range(data_size):\n","#   label=i%78\n","#   sub_graph=getSample(audios[i%78])\n","#   sample_labels.append(label)\n","#   sample_data.append(sub_graph)\n","#   if (i+1)%5000==0:\n","#     print('i= %d | 8000'%(i+1))\n","# 您的会话因占满了所有可用 RAM 而导致崩溃\n","# 改进:把100000改成30000,每次load只练30000的随机样本，\n","# 10000都不行,要不就直接train,跳过datasets 阶段，这样只会增加时间成本，但不至于RAM溢出"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2G4Bl6nTyL_0"},"outputs":[],"source":["# #4.Storing the result for future use\n","# sample_data=torch.tensor(sample_data,dtype=torch.float32)\n","# sample_labels=torch.tensor(sample_labels,dtype=torch.float32)\n","# torch.save(sample_data,'sample_data.pt')\n","# torch.save(sample_labels,'sample_labels.pt')\n","# sample_data.load('sample_data.pt')\n","# sample_labels.load('sample_labels.pt')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HwAQo0WGubBk"},"outputs":[],"source":["#5.shuffle the data & divide into training and validation sets\n","# idx=torch.randperm(sample_labels.size(0))\n","# train_X=[]\n","# train_y=[]\n","# test_X=[]\n","# test_y=[]\n","# for i in range(idx.size(0)):\n","#   if(i<1000):\n","#     test_X.append(sample_data[i])\n","#     test_y.append(sample_data[i])\n","#   else:\n","#     train_X.append(sample_data[i])\n","#     train_y.append(sample_data[i])\n","\n","# train_X=torch.stack(train_X,dtype=torch.float32)\n","# train_y=torch.stack(train_y,dtype=torch.float32)\n","# test_X=torch.stack(test_X,dtype=torch.float32)\n","# test_y=torch.stack(test_y,dtype=torch.float32)\n","# stack 会导致维数多1,就是把整个list 看做单独元素合并的"]},{"cell_type":"markdown","metadata":{"id":"HLmm5BPceKud"},"source":["#3.Building the model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"f_Eolu9QSIF0"},"outputs":[],"source":["import torch.nn as nn\n","import torch.nn.functional as F\n","\n","class CNNModel(nn.Module):\n","    def __init__(self, num_classes):\n","        # kernal size决定 output size 最高维度\n","        # conv层无所谓input size,因为每次input只遍历一个image\n","        super(CNNModel, self).__init__()\n","        self.conv1 = nn.Conv2d(2, 32, kernel_size=(3, 3), stride=1, padding=1)  # 2 input channels for stereo\n","        self.pool1 = nn.AvgPool2d(kernel_size=(2, 4))\n","        self.pool2 = nn.AvgPool2d(kernel_size=(2, 2))\n","        self.conv2 = nn.Conv2d(32, 64, kernel_size=(3, 3), stride=1, padding=1)\n","        self.conv3 = nn.Conv2d(64, 128, kernel_size=(3, 3), stride=1, padding=1)\n","        self.conv4 = nn.Conv2d(128, 64, kernel_size=(3, 3), stride=1, padding=1)\n","        self.conv5 = nn.Conv2d(64, 32, kernel_size=(3, 3), stride=1, padding=1)\n","        self.conv6 = nn.Conv2d(32, 8, kernel_size=(3, 3), stride=1, padding=1)\n","        # Adaptive pooling to ensure output size is fixed\n","        # self.adaptive_pool = nn.AdaptiveAvgPool2d((4,50)) #决定最后两个维度\n","\n","        self.fc1 = nn.Linear(384,192)\n","        self.fc2 = nn.Linear(192,128)\n","        self.fc3 = nn.Linear(128, num_classes)\n","        self.softmax=nn.LogSoftmax(dim=1)\n","\n","    def forward(self, x):\n","        # input_shape: N,2,128,1600\n","        x = self.pool1(F.relu(self.conv1(x))) # conv_out 32 128 1600 --- pool: 32 64 400\n","        x = self.pool1(F.relu(self.conv2(x))) # conv_out 64 64 800 --- pool: 64 32 100\n","        x = self.pool2(F.relu(self.conv3(x))) # conv_out 128 32 100 --- pool: 128 16 50\n","        x = self.pool2(F.relu(self.conv4(x))) # conv_out 64 16 50 --- pool:64 8 25\n","        x = self.pool2(F.relu(self.conv5(x))) # conv_out 32 8 25 --- pool:32 4 12\n","        x = F.relu(self.conv6(x)) # conv_out 8 4 12\n","        # x = self.adaptive_pool(x)\n","        # Flatten the tensor\n","        x = x.view(x.size(0),-1) # flatten: batch_size,384\n","        x = F.relu(self.fc1(x)) # fc1: 192\n","        x = F.relu(self.fc2(x)) # fc2L 128\n","        x = F.relu(self.fc3(x)) # num_classes\n","        x = self.softmax(x)\n","        return x\n","# view 的最后两个维度成功了,48,问题在于第一个维度为何是1024?\n","# ERROR 原来，我的问题在于 没考虑batch size维度，x.size(0)保留的是batch size\n","# ERROR 大概是 不能half flatten, 全神经网络只能接受 (batch_size,b) 的size"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":323,"status":"ok","timestamp":1727448967274,"user":{"displayName":"Xie Richie","userId":"09551390803631790404"},"user_tz":-480},"id":"A440GYhb75mm","outputId":"0f0580c0-f595-4764-9fbe-a2770344df09"},"outputs":[{"name":"stdout","output_type":"stream","text":["torch.Size([5, 6, 56])\n"]}],"source":["import torch\n","x=torch.ones(5,6,7,8)\n","x=x.view(5,6,-1)\n","print(x.size())"]},{"cell_type":"markdown","metadata":{"id":"SoHNH4lNlZWU"},"source":["#4.Training the model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8yDgoUNQi1CN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727504677109,"user_tz":-480,"elapsed":315,"user":{"displayName":"Xie Richie","userId":"09551390803631790404"}},"outputId":"1220c070-9f0e-44d6-9f01-8a95a53b6fdb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{},"execution_count":12}],"source":["\n","# Hyperparameters\n","num_classes = 78\n","num_epochs = 50\n","learning_rate = 0.005\n","batch_size = 32\n","\n","# Preparing model\n","model = CNNModel(num_classes)\n","model.load_state_dict(torch.load('model_weights.pth',weights_only=True))"]},{"cell_type":"code","source":["# Prepare your data\n","X_train, y_train = getBatchSample(batch_size*50)  # Replace with your audio files list\n","\n","# Create DataLoader\n","train_dataset = torch.utils.data.TensorDataset(X_train, y_train)\n","train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True)"],"metadata":{"id":"aLpaP3pSA-zF"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SUY3a_lTldmI","outputId":"1e69327d-2bb5-4168-bbc0-fc526afecdaa"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Loss: 4.3567, Accuracy: 0.8125%\n","Epoch [2/50], Loss: 4.3567, Accuracy: 1.1250%\n","Epoch [3/50], Loss: 4.3567, Accuracy: 1.3750%\n","Epoch [4/50], Loss: 4.3567, Accuracy: 1.1875%\n","Epoch [5/50], Loss: 4.3567, Accuracy: 1.2500%\n","Epoch [6/50], Loss: 4.3567, Accuracy: 1.3125%\n","Epoch [7/50], Loss: 4.3567, Accuracy: 1.6875%\n","Epoch [8/50], Loss: 4.3567, Accuracy: 1.5000%\n","Epoch [9/50], Loss: 4.3567, Accuracy: 1.2500%\n","Epoch [10/50], Loss: 4.3567, Accuracy: 1.6250%\n","Epoch [11/50], Loss: 4.3567, Accuracy: 1.0625%\n","Epoch [12/50], Loss: 4.3567, Accuracy: 1.1875%\n","Epoch [13/50], Loss: 4.3567, Accuracy: 1.3125%\n","Epoch [14/50], Loss: 4.3567, Accuracy: 1.6875%\n","Epoch [15/50], Loss: 4.3567, Accuracy: 1.4375%\n","Epoch [16/50], Loss: 4.3567, Accuracy: 1.0625%\n","Epoch [17/50], Loss: 4.3567, Accuracy: 0.8750%\n","Epoch [18/50], Loss: 4.3567, Accuracy: 1.5625%\n","Epoch [19/50], Loss: 4.3567, Accuracy: 0.6250%\n","Epoch [20/50], Loss: 4.3567, Accuracy: 0.8125%\n","Epoch [21/50], Loss: 4.3567, Accuracy: 2.0000%\n","Epoch [22/50], Loss: 4.3567, Accuracy: 0.8750%\n","Epoch [23/50], Loss: 4.3567, Accuracy: 1.3750%\n","Epoch [24/50], Loss: 4.3567, Accuracy: 1.3125%\n","Epoch [25/50], Loss: 4.3567, Accuracy: 1.1250%\n","Epoch [26/50], Loss: 4.3567, Accuracy: 1.0000%\n","Epoch [27/50], Loss: 4.3567, Accuracy: 1.1250%\n","Epoch [28/50], Loss: 4.3567, Accuracy: 0.9375%\n","Epoch [29/50], Loss: 4.3567, Accuracy: 1.3750%\n","Epoch [30/50], Loss: 4.3567, Accuracy: 1.4375%\n","Epoch [31/50], Loss: 4.3567, Accuracy: 1.3750%\n","Epoch [32/50], Loss: 4.3567, Accuracy: 0.9375%\n","Epoch [33/50], Loss: 4.3567, Accuracy: 0.8750%\n","Epoch [34/50], Loss: 4.3567, Accuracy: 1.1875%\n","Epoch [35/50], Loss: 4.3567, Accuracy: 1.1250%\n","Epoch [36/50], Loss: 4.3567, Accuracy: 1.1875%\n","Epoch [37/50], Loss: 4.3567, Accuracy: 0.9375%\n","Epoch [38/50], Loss: 4.3567, Accuracy: 1.6250%\n","Epoch [39/50], Loss: 4.3567, Accuracy: 1.5000%\n","Epoch [40/50], Loss: 4.3567, Accuracy: 1.1250%\n","Epoch [41/50], Loss: 4.3567, Accuracy: 1.6250%\n","Epoch [42/50], Loss: 4.3567, Accuracy: 1.5625%\n","Epoch [43/50], Loss: 4.3567, Accuracy: 1.3125%\n","Epoch [44/50], Loss: 4.3567, Accuracy: 1.2500%\n"]}],"source":["\n","\n","\n","\n","# Initialize the model, loss function, and optimizer\n","criterion = nn.CrossEntropyLoss()\n","optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n","# print(model)\n","# Training loop\n","for epoch in range(num_epochs):\n","    accuracy=[]\n","    X_train, y_train = getBatchSample(batch_size*50)\n","    train_dataset = torch.utils.data.TensorDataset(X_train, y_train)\n","    train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n","    for inputs, labels in train_loader:\n","        optimizer.zero_grad()  # Clear gradients\n","        outputs = model(inputs)  # Forward pass\n","        _,pred=outputs.max(dim=1) # tensor([32]) 而非 tensor([32,1])\n","        accuracy.append((torch.sum((pred==labels),0).item())/batch_size)\n","        loss = criterion(outputs, labels)  # Compute loss\n","        # 不需要把outputs设计成一个值\n","        loss.backward()  # Backward pass\n","        optimizer.step()  # Update weights\n","    # print(accuracy)\n","    avg_accuracy=sum(accuracy)/len(accuracy)\n","    print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {loss.item():.4f}, Accuracy: {avg_accuracy*100:.4f}%')\n","torch.save(model.state_dict(),'model_weights.pth')\n","\n","# '''\n","#   问题在于,fc1之前为什么是32x55808? 到底经历了些什么?\n","#   872,512 是fc1的输入输出\n","#   经历了flatten\n","# '''"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zp6EJqwACrAI","executionInfo":{"status":"error","timestamp":1727511913122,"user_tz":-480,"elapsed":619,"user":{"displayName":"Xie Richie","userId":"09551390803631790404"}},"colab":{"base_uri":"https://localhost:8080/","height":141},"outputId":"fd51b09c-1813-4771-937b-ceec93bffc37"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'torch' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-cc219e1ae64a>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstate_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'model_weights.pth'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'torch' is not defined"]}],"source":["torch.save(model.state_dict(),'model_weights.pth')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":310,"status":"ok","timestamp":1727455359254,"user":{"displayName":"Xie Richie","userId":"09551390803631790404"},"user_tz":-480},"id":"gfux_ir8OMnR","outputId":"d1c3165a-9a50-4b69-ce55-b795e217e42b","collapsed":true},"outputs":[{"name":"stdout","output_type":"stream","text":["tensor([[1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.]])\n","tensor([[0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0],\n","        [0]])\n","30\n"]}],"source":["import torch\n","a=torch.ones(32,5)\n","a,_=a.max(dim=1,keepdim=True)\n","print(a)\n","print(_)\n","l=torch.ones(32,1)\n","l[0,0]=0\n","l[11,0]=0\n","print(torch.sum(a==l,0).item())"]},{"cell_type":"markdown","metadata":{"id":"oSFkw26HzT3T"},"source":["#5.Evaluating the model"]},{"cell_type":"markdown","metadata":{"id":"TDjZH8zCEwL2"},"source":["# Reference"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1727354381172,"user":{"displayName":"Xie Richie","userId":"09551390803631790404"},"user_tz":-480},"id":"zdA9Qg-qIog7","outputId":"0463dc41-d2cd-4e2d-db4c-75f0a81d5c83"},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[0m\u001b[01;34mdatabase\u001b[0m/  database.zip  Music_recognition.ipynb\n"]}],"source":["%ls\n","# !unzip database.zip"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8Os1SjGsRfl2"},"outputs":[],"source":["# 尝试外部下载结果实在是搞不来\n","# !pip install torchaudio\n","# !pip install gdown\n","# !pip install --upgrade --no-cache-dir gdown\n","# !gdown https://drive.google.com/uc?export=download&id=1sxkvXWEeUiwC7kc1skQZ7x6nTcT5Yez-&confirm=t\n","# https://drive.google.com/uc?export=download&id=1sxkvXWEeUiwC7kc1skQZ7x6nTcT5Yez-\n","# https://drive.google.com/file/d/1sxkvXWEeUiwC7kc1skQZ7x6nTcT5Yez-/view?usp=sharing"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":465},"executionInfo":{"elapsed":6232,"status":"ok","timestamp":1727337243639,"user":{"displayName":"Xie Richie","userId":"09551390803631790404"},"user_tz":-480},"id":"HubkwoxqUNHv","outputId":"b5f65444-326d-48c7-e8ae-d1c6fd202a5b"},"outputs":[{"name":"stdout","output_type":"stream","text":["44100\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["print(sample_rate)\n","plt.figure()\n","plt.plot(waveform.t().numpy())\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8paliYrlEv05"},"outputs":[],"source":["#用集成的RNN模型，而非in scratch\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import DataLoader, TensorDataset\n","\n","# Sample data\n","data = torch.randn(100, 10, 20)  # 100 sequences, each of length 10, with 20 features\n","labels = torch.randint(0, 2, (100, 10))  # Binary labels for each sequence\n","\n","# Create DataLoader\n","dataset = TensorDataset(data, labels)\n","dataloader = DataLoader(dataset, batch_size=16, shuffle=True)\n","\n","# Define RNN model\n","class SimpleRNN(nn.Module):\n","    def __init__(self, input_size, hidden_size, output_size):\n","        super(SimpleRNN, self).__init__()\n","        self.rnn = nn.RNN(input_size, hidden_size, batch_first=True)\n","        self.fc = nn.Linear(hidden_size, output_size)\n","\n","    def forward(self, x):\n","        h0 = torch.zeros(1, x.size(0), hidden_size).to(x.device)\n","        out, _ = self.rnn(x, h0)\n","        out = self.fc(out)\n","        return out\n","\n","input_size = 20\n","hidden_size = 50\n","output_size = 1\n","\n","model = SimpleRNN(input_size, hidden_size, output_size)\n","criterion = nn.BCEWithLogitsLoss()\n","optimizer = optim.Adam(model.parameters(), lr=0.001)\n","\n","# Training loop\n","for epoch in range(10):\n","    for batch_data, batch_labels in dataloader:\n","        optimizer.zero_grad()\n","        outputs = model(batch_data)\n","        loss = criterion(outputs, batch_labels.float())\n","        loss.backward()\n","        optimizer.step()\n","    print(f'Epoch {epoch+1}, Loss: {loss.item()}')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_oal8jmWTWlV"},"outputs":[],"source":["\n","# Path to your MP3 file\n","mp3_path = \"/content/drive/MyDrive/Project_learning/Music_classifier/database/M03001.mp3\"\n","\n","# Load the MP3 file\n","waveform, sample_rate = torchaudio.load(mp3_path)\n","\n","# Print waveform and sample rate\n","print(f\"Waveform shape: {waveform.shape}\")\n","print(f\"Sample rate: {sample_rate}\")\n","\n","# Optional: Normalize the waveform\n","waveform = waveform / waveform.abs().max()\n","\n","# Optional: Resample the waveform to a different sample rate\n","resample_rate = 16000\n","resampler = torchaudio.transforms.Resample(orig_freq=sample_rate, new_freq=resample_rate)\n","waveform = resampler(waveform)\n","\n","print(f\"Resampled waveform shape: {waveform.shape}\")\n","print(f\"Resampled sample rate: {resample_rate}\")\n","\n","# resample意味着减小resolution"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yf9WD2F3WxmQ"},"outputs":[],"source":["'''\n","  Waveform shape: torch.Size([2, 9967188])--- 2代表两个发声channel,9967188代表第几个时间采样点(存储频率),\n","  Sample rate: 44100\n","  Resampled waveform shape: torch.Size([2, 3616214])\n","  Resampled sample rate: 16000\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ydpa3AXue_P-"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","\n","# 定义RNN模型\n","class AudioRNN(nn.Module):\n","    def __init__(self, input_size, hidden_size, num_layers, num_classes):\n","        super(AudioRNN, self).__init__()\n","        self.hidden_size = hidden_size\n","        self.num_layers = num_layers\n","        self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True)\n","        self.fc = nn.Linear(hidden_size, num_classes)\n","\n","    def forward(self, x):\n","        h0 = torch.zeros(self.num_layers, x.size(0), self.hidden_size).to(x.device)\n","        c0 = torch.zeros(self.num_layers, x.size(0), self.hidden_size).to(x.device)\n","        out, _ = self.lstm(x, (h0, c0))\n","        out = self.fc(out[:, -1, :])\n","        return out\n","\n","# 超参数设置\n","input_size = 40  # 例如，MFCC特征的维度\n","hidden_size = 128\n","num_layers = 2\n","num_classes = 10  # 例如，分类任务的类别数\n","learning_rate = 0.001\n","num_epochs = 20\n","\n","# 创建模型、损失函数和优化器\n","model = AudioRNN(input_size, hidden_size, num_layers, num_classes).to(device)\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n","\n","# 假设train_loader是加载音频数据的DataLoader\n","for epoch in range(num_epochs):\n","    for i, (audios, labels) in enumerate(train_loader):\n","        audios = audios.to(device)\n","        labels = labels.to(device)\n","\n","        # 前向传播\n","        outputs = model(audios)\n","        loss = criterion(outputs, labels)\n","\n","        # 反向传播和优化\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","\n","        if (i+1) % 100 == 0:\n","            print(f'Epoch [{epoch+1}/{num_epochs}], Step [{i+1}/{len(train_loader)}], Loss: {loss.item():.4f}')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_MsrEvQIOAcW"},"outputs":[],"source":["#原本的torchaudio版本\n","for i in range(len(file_names)):\n","  audio,sample_rate = librosa.load(file_names[i],sr=None,mono=False)\n","  # normalize the data\n","  waveform = waveform / waveform.abs().max()\n","  resample_rate = 16000\n","  resampler = torchaudio.transforms.Resample(orig_freq=sample_rate, new_freq=resample_rate)\n","  waveform = resampler(waveform)\n","  # appending all the data\n","  waveforms.append(waveform)\n","  if (i+1)%5==0:\n","    print(\"Loaded %d/85 \"%(i+1))\n"]}],"metadata":{"colab":{"provenance":[],"machine_shape":"hm","gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}